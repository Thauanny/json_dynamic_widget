// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'json_circular_progress_indicator_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: avoid_init_to_null
// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_if_null_operators
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class JsonCircularProgressIndicatorBuilder
    extends _JsonCircularProgressIndicatorBuilder {
  const JsonCircularProgressIndicatorBuilder({required super.args});

  static const kType = 'circular_progress_indicator';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static JsonCircularProgressIndicatorBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) =>
      JsonCircularProgressIndicatorBuilder(
        args: map,
      );

  @override
  JsonCircularProgressIndicatorBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = JsonCircularProgressIndicatorBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  CircularProgressIndicator buildCustom({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(
      childBuilder: childBuilder,
      data: data,
    );

    final strokeAlignDecoded = _decodeStrokeAlign(
      value: model.strokeAlign,
    );
    final valueColorDecoded = _decodeValueColor(
      value: model.valueColor,
    );

    return CircularProgressIndicator(
      backgroundColor: model.backgroundColor,
      color: model.color,
      key: key,
      semanticsLabel: model.semanticsLabel,
      semanticsValue: model.semanticsValue,
      strokeAlign: strokeAlignDecoded,
      strokeCap: model.strokeCap,
      strokeWidth: model.strokeWidth,
      value: model.value,
      valueColor: valueColorDecoded,
    );
  }
}

class JsonCircularProgressIndicator extends JsonWidgetData {
  JsonCircularProgressIndicator({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.backgroundColor,
    this.color,
    this.semanticsLabel,
    this.semanticsValue,
    this.strokeAlign = CircularProgressIndicator.strokeAlignCenter,
    this.strokeCap,
    this.strokeWidth = 4.0,
    this.value,
    this.valueColor = null,
  }) : super(
          jsonWidgetArgs: JsonCircularProgressIndicatorBuilderModel.fromDynamic(
            {
              'backgroundColor': backgroundColor,
              'color': color,
              'semanticsLabel': semanticsLabel,
              'semanticsValue': semanticsValue,
              'strokeAlign': strokeAlign,
              'strokeCap': strokeCap,
              'strokeWidth': strokeWidth,
              'value': value,
              'valueColor': valueColor,
              ...args,
            },
            args: args,
            registry: registry,
          ),
          jsonWidgetBuilder: () => JsonCircularProgressIndicatorBuilder(
            args: JsonCircularProgressIndicatorBuilderModel.fromDynamic(
              {
                'backgroundColor': backgroundColor,
                'color': color,
                'semanticsLabel': semanticsLabel,
                'semanticsValue': semanticsValue,
                'strokeAlign': strokeAlign,
                'strokeCap': strokeCap,
                'strokeWidth': strokeWidth,
                'value': value,
                'valueColor': valueColor,
                ...args,
              },
              args: args,
              registry: registry,
            ),
          ),
          jsonWidgetType: JsonCircularProgressIndicatorBuilder.kType,
        );

  final Color? backgroundColor;

  final Color? color;

  final String? semanticsLabel;

  final String? semanticsValue;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeAlign]*/
  /// The relative position of the stroke on a [CircularProgressIndicator].
  ///
  /// Values typically range from -1.0 ([strokeAlignInside], inside stroke)
  /// to 1.0 ([strokeAlignOutside], outside stroke),
  /// without any bound constraints (e.g., a value of -2.0 is not typical, but allowed).
  /// A value of 0 ([strokeAlignCenter], default) will center the border
  /// on the edge of the widget.
  final dynamic strokeAlign;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeCap]*/
  /// The progress indicator's line ending.
  ///
  /// This determines the shape of the stroke ends of the progress indicator.
  /// By default, [strokeCap] is null.
  /// When [value] is null (indeterminate), the stroke ends are set to
  /// [StrokeCap.square]. When [value] is not null, the stroke
  /// ends are set to [StrokeCap.butt].
  ///
  /// Setting [strokeCap] to [StrokeCap.round] will result in a rounded end.
  /// Setting [strokeCap] to [StrokeCap.butt] with [value] == null will result
  /// in a slightly different indeterminate animation; the indicator completely
  /// disappears and reappears on its minimum value.
  /// Setting [strokeCap] to [StrokeCap.square] with [value] != null will
  /// result in a different display of [value]. The indicator will start
  /// drawing from slightly less than the start, and end slightly after
  /// the end. This will produce an alternative result, as the
  /// default behavior, for example, that a [value] of 0.5 starts at 90 degrees
  /// and ends at 270 degrees. With [StrokeCap.square], it could start 85
  /// degrees and end at 275 degrees.
  final StrokeCap? strokeCap;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeWidth]*/
  /// The width of the line used to draw the circle.
  final double strokeWidth;

  final double? value;

  final dynamic valueColor;
}

/* AUTOGENERATED FROM [CircularProgressIndicator]*/
/// Creates a circular progress indicator.
///
/// {@macro flutter.material.ProgressIndicator.ProgressIndicator}
class JsonCircularProgressIndicatorBuilderModel extends JsonWidgetBuilderModel {
  const JsonCircularProgressIndicatorBuilderModel(
    super.args, {
    this.backgroundColor,
    this.color,
    this.semanticsLabel,
    this.semanticsValue,
    this.strokeAlign = CircularProgressIndicator.strokeAlignCenter,
    this.strokeCap,
    this.strokeWidth = 4.0,
    this.value,
    this.valueColor = null,
  });

  final Color? backgroundColor;

  final Color? color;

  final String? semanticsLabel;

  final String? semanticsValue;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeAlign]*/
  /// The relative position of the stroke on a [CircularProgressIndicator].
  ///
  /// Values typically range from -1.0 ([strokeAlignInside], inside stroke)
  /// to 1.0 ([strokeAlignOutside], outside stroke),
  /// without any bound constraints (e.g., a value of -2.0 is not typical, but allowed).
  /// A value of 0 ([strokeAlignCenter], default) will center the border
  /// on the edge of the widget.
  final dynamic strokeAlign;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeCap]*/
  /// The progress indicator's line ending.
  ///
  /// This determines the shape of the stroke ends of the progress indicator.
  /// By default, [strokeCap] is null.
  /// When [value] is null (indeterminate), the stroke ends are set to
  /// [StrokeCap.square]. When [value] is not null, the stroke
  /// ends are set to [StrokeCap.butt].
  ///
  /// Setting [strokeCap] to [StrokeCap.round] will result in a rounded end.
  /// Setting [strokeCap] to [StrokeCap.butt] with [value] == null will result
  /// in a slightly different indeterminate animation; the indicator completely
  /// disappears and reappears on its minimum value.
  /// Setting [strokeCap] to [StrokeCap.square] with [value] != null will
  /// result in a different display of [value]. The indicator will start
  /// drawing from slightly less than the start, and end slightly after
  /// the end. This will produce an alternative result, as the
  /// default behavior, for example, that a [value] of 0.5 starts at 90 degrees
  /// and ends at 270 degrees. With [StrokeCap.square], it could start 85
  /// degrees and end at 275 degrees.
  final StrokeCap? strokeCap;

  /* AUTOGENERATED FROM [CircularProgressIndicator.strokeWidth]*/
  /// The width of the line used to draw the circle.
  final double strokeWidth;

  final double? value;

  final dynamic valueColor;

  static JsonCircularProgressIndicatorBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(
      map,
      args: args,
      registry: registry,
    );

    if (result == null) {
      throw Exception(
        '[JsonCircularProgressIndicatorBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static JsonCircularProgressIndicatorBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    JsonCircularProgressIndicatorBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(
          map,
          normalize: true,
        );
      }

      if (map is JsonCircularProgressIndicatorBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = JsonCircularProgressIndicatorBuilderModel(
          args,
          backgroundColor: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['backgroundColor'],
              validate: false,
            );

            return parsed;
          }(),
          color: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['color'],
              validate: false,
            );

            return parsed;
          }(),
          semanticsLabel: map['semanticsLabel'],
          semanticsValue: map['semanticsValue'],
          strokeAlign:
              map['strokeAlign'] ?? CircularProgressIndicator.strokeAlignCenter,
          strokeCap: map['strokeCap'],
          strokeWidth: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['strokeWidth']);

            parsed ??= 4.0;

            return parsed;
          }(),
          value: () {
            dynamic parsed = JsonClass.maybeParseDouble(map['value']);

            return parsed;
          }(),
          valueColor: map['valueColor'],
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'backgroundColor': ThemeEncoder.encodeColor(
        backgroundColor,
      ),
      'color': ThemeEncoder.encodeColor(
        color,
      ),
      'semanticsLabel': semanticsLabel,
      'semanticsValue': semanticsValue,
      'strokeAlign': CircularProgressIndicator.strokeAlignCenter == strokeAlign
          ? null
          : strokeAlign,
      'strokeCap': strokeCap,
      'strokeWidth': 4.0 == strokeWidth ? null : strokeWidth,
      'value': value,
      'valueColor': null == valueColor ? null : valueColor,
      ...args,
    });
  }
}

class CircularProgressIndicatorSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/json_dynamic_widget/circular_progress_indicator.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'CircularProgressIndicator',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'backgroundColor': SchemaHelper.objectSchema(ColorSchema.id),
      'color': SchemaHelper.objectSchema(ColorSchema.id),
      'semanticsLabel': SchemaHelper.stringSchema,
      'semanticsValue': SchemaHelper.stringSchema,
      'strokeAlign': SchemaHelper.numberSchema,
      'strokeCap': SchemaHelper.anySchema,
      'strokeWidth': SchemaHelper.numberSchema,
      'value': SchemaHelper.numberSchema,
      'valueColor': SchemaHelper.anySchema,
    },
  };
}
